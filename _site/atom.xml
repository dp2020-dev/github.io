<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Testio Tech</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2025-02-16T11:00:20+00:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Daniel Phillips</name>
   <email></email>
 </author>

 
 <entry>
   <title>Testing dbt data transformations, including dbt-expectations.</title>
   <link href="http://localhost:4000/2024/12/08/dbt-expectations/"/>
   <updated>2024-12-08T00:00:00+00:00</updated>
   <id>http://localhost:4000/2024/12/08/dbt-expectations</id>
   <content type="html">&lt;p&gt;&lt;i&gt; The post gives a summary of the different types of data tests that can be applied to a data transformation project, including the use of dbt-expectations. The content is based on a &lt;a href=&quot;#dbt_bootcamp&quot;&gt;dbt bootcamp course&lt;/a&gt;, with examples and explanations as to what’s being tested and how. The examples are available in Github:
&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dp2020-dev/completeDbtBootcamp&quot; target=&quot;\_blank&quot;&gt;dbt complete bootcamp repo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;why-data-testing&quot;&gt;Why data testing?&lt;/h3&gt;

&lt;p&gt;From my experience with data transformation projects in the past (e.g. moving data from on prem to the Azure cloud) I’m aware of the challenges of ensuring the quality of data taken from multiple sources into target tables, the transformations at each stage and maintaining this quality continuously in a CI/CD delivery. This complexity makes manual testing onerous (especially given the transformations are likely to be part of an automated pipeline), with an underlying risk that errors in the end data can erode the user’s confidence in the data being consumed.&lt;/p&gt;

&lt;p&gt;Given this context, being able to create efficient, discrete scripted tests at the key stages of a data pipeline using sql and built in dbt tests are a powerful, efficient way to ensure data quality throughout a data transformation project. &lt;a href=&quot;https://greatexpectations.io/&quot;&gt;Great Expectations.io&lt;/a&gt; and the dbt-specific version &lt;a href=&quot;https://github.com/calogica/dbt-expectations&quot;&gt;dbt-expectations&lt;/a&gt; offer a user friendly framework to further extend test coverage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gx_logo_horiz_color.png&quot; alt=&quot;Great Expectations logo, December 2024&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To see these test tools (dbt tests, gbt-expectations and custom sql tests) in action the following Udemy ‘bootcamp’ course was an excellent introduction to dbt and its test tools, and the screenshots and material in this post are based on this course:&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;dbt_bootcamp&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://www.udemy.com/course/complete-dbt-data-build-tool-bootcamp-zero-to-hero-learn-dbt&quot;&gt;The Complete dbt (Data Build Tool) Bootcamp:&lt;/a&gt; &lt;img src=&quot;/images/dbtHeroUdemy.png&quot; alt=&quot;dbt bootcamp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The boot camp covers the theory and practical application of a data project using snowflake as the data warehouse, and the open source version of dbt. What was particularly relevant for a tester are the sections covering testing which include &lt;a href=&quot;https://hub.getdbt.com/calogica/dbt_expectations/latest/&quot;&gt;dbt expectations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following section covers examples and explanations of what these 3 types of tests can do, using the boot camp project as &lt;a href=&quot;https://github.com/dp2020-dev/completeDbtBootcamp&quot; target=&quot;\_blank&quot;&gt;an example:&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;built-in-dbt-tests&quot;&gt;Built-in dbt Tests:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;not_null: Ensures that the column doesn&apos;t contain null values.&lt;/li&gt;
&lt;li&gt;unique: Verifies that all values in the column are distinct.&lt;/li&gt;
&lt;li&gt;relationships: Checks if a foreign key relationship exists between two columns in different models.&lt;/li&gt;
&lt;li&gt;accepted_values: Ensures that the column only contains specific values from a predefined list.&lt;/li&gt;
&lt;li&gt;positive_value:&amp;lt;/b&amp;gt; Verifies that the column values are positive numbers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;built-in-dbt-expectations-tests&quot;&gt;Built-in dbt-expectations Tests:&lt;/h3&gt;

&lt;h4 id=&quot;what-is-dbt-expectations&quot;&gt;What is dbt-expectations?&lt;/h4&gt;

&lt;p&gt;dbt-expectations is an open source python package for dbt based on Great Expectations, and enables integrated tests in data warehouses supported by dbt.&lt;/p&gt;

&lt;p&gt;This allows us to extend the coverage of the dbt core (i.e. the built in tests) using a range of tests within the package. The examples below include the built in tests, dbt-expectations tests and custom sql tests (effectively macros). These tests are written in the schema.yml file as per this example in &lt;a href=&quot;https://github.com/dp2020-dev/completeDbtBootcamp/blob/main/models/schema.yml&quot;&gt;the schema file&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dbt_expectations. expect_table_row_count_to_equal_other_table: Compares the row count of two tables.&lt;/li&gt;

&lt;li&gt;dbt_expectations.expect_column_values_to_be_of_type: Checks the data type of a column.&lt;/li&gt;
&lt;a id=&quot;quantile_test&quot;&gt;&lt;/a&gt; &lt;li&gt;dbt_expectations.expect_column_quantile_values_to_be_between: Verifies that quantile values fall within a specific range.&lt;/li&gt;
&lt;li&gt;dbt_expectations.expect_column_max_to_be_between: Ensures that the maximum value of a column is within a certain range.&lt;/li&gt;&lt;br /&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;example-dbt-expectations-test&quot;&gt;Example dbt-expectations test:&lt;br /&gt;&lt;/h4&gt;

&lt;p&gt;To apply dbt expectation tests, the code is added to the schema.yml file
, in the example below its used to check column type, expected values (including the quantile value to check values in the table are in an expected range), and a max value. We can also set if a failing test is a warning or an error.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dbtExpectSampleTests.png&quot; alt=&quot;Great Expectations logo, December 2024&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;built-in-custom-sql-tests&quot;&gt;Built-in custom sql Tests:&lt;/h3&gt;

&lt;p&gt;The third type of dbt test used in this project is a &lt;b&gt;custom sql test&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;This simple sql custom test checks the ‘dim_listings_cleansed’ table for any listings with &amp;lt; 1 night.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dim_listings_min_nights.png&quot; alt=&quot;Custom sql example- min nights&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Custom tests sit outside the dbt core and dbt-expectations tests and can
extend test coverage to cover edge cases. They are also flexible in enabling ad hoc testing to investigate
scenarios, or to be part of the CI/CD pipeline- see an example of how we can trace the &lt;code&gt;dim_listings_min_nights&lt;/code&gt; custom rest on the data lineage graph in the &lt;a href=&quot;#dag_lineage&quot;&gt;lineage graph section.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;br /&gt;&lt;/h2&gt;

&lt;p&gt;For the basic commands on debugging etc. see &lt;a href=&quot;https://docs.getdbt.com/reference/commands/debug&quot;&gt;About dbt debug command&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;dbt test --debug&lt;/code&gt; command will run all the sql tests against the database connections, the console logs all the test names and the results. However to dig into why a given test failed,
its possible to run the actual sql test against the source table (e.g. in this project in Snowflake) and simplifying the test code to find exactly where it failed- a good approach for a complex failure.&lt;/p&gt;

&lt;h2 id=&quot;lineage-graph-data-flow-dag&quot;&gt;Lineage Graph (Data Flow DAG)&lt;br /&gt;&lt;/h2&gt;

&lt;p&gt;In the section above we’ve looked at practical tests in dbt-expectations which can be embedded in the data transformation pipeline. These tests can be included on a really useful dbt feature, the ‘lineage graph’ alongside the source tables, dimension, fact tables etc. to show where and when the tests run, what table it relates to etc.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;dag_lineage&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dbt-dag-3.png&quot; alt=&quot;dbt lineage graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Provided test in question is included in the schema.yml and has a description value, it will be included in the correct part of the data transformation flow.&lt;/p&gt;

&lt;p&gt;For example, the lineage graph below shows the flow of data in our data warehouse, for instance we can see at a glance that &lt;code&gt;dim_listings_cleansed&lt;/code&gt; is a cleansed dimension table based on the &lt;code&gt;src_listings table&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/lineage_right_click.png&quot; alt=&quot;dbt lineage graph right click&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By right clicking and checking documentation for &lt;code&gt;dim_listings_cleansed&lt;/code&gt;, we can check all the tests in place for this stage of the transformation, for instance we can tell the the &lt;code&gt;room_type&lt;/code&gt; test checks the type of room as per the description.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/docs_room_type_test.png&quot; alt=&quot;dbt docs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For reference the test itself is a built in test in the &lt;a href=&quot;https://github.com/dp2020-dev/completeDbtBootcamp/blob/ebd7310c905f63a124e43aee2725aeab9a00f8d9/models/schema.yml#L21&quot;&gt;schema.yml&lt;/a&gt;, and while the schema clearly lists all tests its great to be able to visualise where exactly this test sits in the data pipeline, what table(s) it references and we’re able to click through to read its description and code via the graph. In a data transformation with many sources/transformations this tool would be invaluable.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;The different types of test tools used in this project has demonstrated how a tester can add value to a data transformation project. Firstly, the &lt;a href=&quot;#[Built-in dbt Tests:]&quot;&gt;dbt core&lt;/a&gt; tests are simple, efficient sql tests at key stages of the data pipelines gives us assurance as the data is ingested and transformed at each stage.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#[Built-in dbt-expectations Tests:]&quot;&gt;Dbt-expectations&lt;/a&gt; allows us to extend the test coverage by enabling more advanced validations like expected percentiles, ranges, and more complex rules. For example the boot camp uses the &lt;a href=&quot;quantile_test&quot;&gt;expect_column_quantile_values_to_be_between&lt;/a&gt; test to flag a warning if a value in the top 1% of prices for a listing is outside a given range. This is a check for anomalies in the data based on our use case, dbt-Expectations in particular would be useful from a QA perspective- in collaboration with the end user/stakeholder a tester could start thinking of qualitative tests.&lt;/p&gt;

&lt;p&gt;Finally, while not strictly speaking a tets tool/feature, I expect a tester would find the &lt;a href=&quot;dag_lineage&quot;&gt;dag diagrams&lt;/a&gt; a really useful tool to keep track of what data is ingested where, how its transformed and which tests are applied to it.&lt;/p&gt;

&lt;p&gt;I found there was some overhead to setting up the project structure so that the yaml picked up the right references, and that each of the 3 different types of tests were configured properly, but once up and running I was able to add more tests and extend test coverage. I started thinking of more potential validation tests using dbt expectations, so again these tools would empower a tester to work with the project/stakeholders to really start applying quality assurance not just to the data transformation itself but how its used by the stakeholders.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Use the 5W framework to get your own personal study plan from ChatGPT, Gemini, Copilot or other LLM/Generative AI tool.</title>
   <link href="http://localhost:4000/2024/01/26/5W-Framework/"/>
   <updated>2024-01-26T00:00:00+00:00</updated>
   <id>http://localhost:4000/2024/01/26/5W-Framework</id>
   <content type="html">&lt;p&gt;&lt;i&gt;Note: this blog post is a summary of a talk I have delivered to test groups.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;One of the most rewarding (and challenging) aspects of software testing is keeping up to date with the pace of change in the industry- from new test tools, changes in the technology stack or wider disruption, e.g. AI is a great example.&lt;/p&gt;

&lt;p&gt;Therefore the ability to self-learn and learn ‘on the job’ is a key skill for a software tester, and with that in mind I’ve found utilising the &lt;i&gt;5W framework&lt;/i&gt; invaluable to take advantage of what ChatGPT or any other large language model (LLM) can offer.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-need-a-framework&quot;&gt;Why do we need a framework?&lt;/h3&gt;

&lt;p&gt;This is a simple technique that forces us to think through what information and material we want from the LLM. This will give us a structure to both our prompts and the response we get back.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-5w&quot;&gt;What is the 5W?&lt;/h3&gt;

&lt;p&gt;This technique is from an excellent blog by Tina Huang, and is originally based on learning a programming language but is equally applicable to test-related learning:&lt;/p&gt;

&lt;p&gt;Apply 5 W framework to get a more relevant response (the example I’ve used here is to learn Selenium):&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;b&gt; Who? &lt;/b&gt; What role does ChatGPT have-  e.g. tutor/trainer.&lt;/li&gt;
&lt;li&gt;&lt;b&gt; What? &lt;/b&gt; Do we want to learn? (e.g. Selenium web driver with Java).&lt;/li&gt;
&lt;li&gt;&lt;b&gt; When? &lt;/b&gt; Timeline, amount of time available.&lt;/li&gt;
&lt;li&gt;&lt;b&gt; Where? &lt;/b&gt; Online courses, videos or text based courses.&lt;/li&gt;
&lt;li&gt;&lt;b&gt; Why? &lt;/b&gt; What&apos;s the goal? (e.g. Automated testing using Java/Selenium).&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://www.youtube.com/watch?v=VznoKyh6AXs&amp;amp;list=LL&amp;amp;index=2&amp;amp;t=377s&amp;amp;themeRefresh=1&quot;&gt;Tina Huang – YouTube: How to learn to code FAST using ChatGPT (it’s a game changer seriously)&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;5w-prompt-example&quot;&gt;5W prompt example&lt;/h3&gt;

&lt;p&gt;Based on this example, this gives us the following prompt to input into the LLM:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Act as a coding tutor to create a study plan to help me learn Selenium using Java to be able to create automated tests for front end e-commerce systems. I can study for up to 6 hours a week for 8 weeks, and prefer interactive, example based free resources.
Suggest reliable web resources that can be easily found through a web search or by directly visiting the official websites.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The above style of prompt should give a structured plan based on the 5W &lt;i&gt;what&lt;/i&gt;, in the timelines defined in the &lt;i&gt;when&lt;/i&gt;. I’ve found this approach helpful when learning Cypress for example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sampleResponse.jpg&quot; alt=&quot;An example response, &apos;How to use ChatGPT for your own study plan&apos;, January 2024&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;do-we-need-a-framework&quot;&gt;Do we need a framework?&lt;/h3&gt;

&lt;p&gt;Some of the advantages of using this framework in ChatGPT (or another LLM):&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;Gives a structured plan, with suggested resources.&lt;/li&gt;
&lt;li&gt;It&apos;s adaptable- if our focus or timelines change, we can change the study plan.&lt;/li&gt;
&lt;li&gt;Keeps it relevant- we can add or remove topics/elements of the plan where necessary (not possible in an ‘off the shelf’ course)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;talks&quot;&gt;Talks&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/TTW_January2024.jpg&quot; alt=&quot;Test Talks Wales, &apos;How to use ChatGPT for your own study plan&apos;, January 2024&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As mentioned above, I’ve used this framework both personally and as part of development and learning professionally in work, and it’s the basis of a talk I’ve presented at &lt;a href=&quot;https://www.meetup.com/test-talks-wales/events/298323939/&quot;&gt;Test Talks Wales&lt;/a&gt;, &lt;a href=&quot;https://www.meetup.com/south-west-test/events/301151914/&quot;&gt;South West Test&lt;/a&gt; and &lt;a href=&quot;https://www.meetup.com/mot-newcastle/events/298859530/&quot;&gt;Ministry of Testing Talks Newcastle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/MoT_Newcastle.webp&quot; alt=&quot;MoT Newcastle Group, &apos;How to use ChatGPT for your own study plan&apos;, JMarch 2024&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions of feedback based on this post or after a talk, do please get in touch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;mailto:ebost2004@yahoo.co.uk&quot;&gt;&lt;img src=&quot;/images/email2.webp&quot; alt=&quot;email2&quot; width=&quot;70&quot; height=&quot;70&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;www.linkedin.com/in/daniel-phillips-ba99161b8&quot;&gt;&lt;img src=&quot;/images/linkedin3.webp&quot; alt=&quot;LI icon - small&quot; width=&quot;70&quot; height=&quot;70&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Azure AI Fundamentals (AI-900)</title>
   <link href="http://localhost:4000/2023/11/10/AI-Fundamentals-AI900/"/>
   <updated>2023-11-10T00:00:00+00:00</updated>
   <id>http://localhost:4000/2023/11/10/AI-Fundamentals-AI900</id>
   <content type="html">&lt;p&gt;As I’ve started getting to grips with Large Language Models, code tools such as GitHub co-pilot, and seen some of the really interesting talks about AI in the test community I was keen to understand more about the fundamentals behind AI- the AI-900 course was ideal, and I can strongly recommend it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/credentials/certifications/azure-ai-fundamentals/?practice-assessment-type=certification&quot;&gt;Microsoft Certified: Azure AI Fundamentals&lt;/a&gt;
&lt;img src=&quot;/images/AI900.png&quot; alt=&quot;Microsoft AI Fundamentals&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This has given me a really useful background in the fundamental concepts of AI and how its practically applied- it covers chat bots, prediction models, large language models etc. so certainly covers a wide range of relevant topics. The hands on ‘sand pit’ exercises were really well designed and give a good insight into how regression, machine learning, training data and other fundamental AI concepts work. At the same time, the course is engaging and pretty short, so I’d recommend anyone with an interest in AI to give it a go.&lt;/p&gt;

&lt;p&gt;In terms of the course itself and the exam, it has a thorough self learning path which along with the self practice exam is all you really need, but I can also definitely recommend &lt;a href=&quot;https://www.youtube.com/watch?v=E9aarWMLJw0&quot;&gt;John Savill’s AI-900 - Azure AI Fundamentals Study Guide&lt;/a&gt; as a practical summary.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/E9aarWMLJw0?si=yENZLXwBpYQi964c&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting hands on with test tools- Cypress versus Playwright</title>
   <link href="http://localhost:4000/2023/10/28/compare-cypress-playwright/"/>
   <updated>2023-10-28T00:00:00+01:00</updated>
   <id>http://localhost:4000/2023/10/28/compare-cypress-playwright</id>
   <content type="html">&lt;p&gt;&lt;i&gt;This post will give some practical advice on installing &lt;a href=&quot;#-setting-up-cypress-and-run-tests&quot;&gt;Cypress&lt;/a&gt; and &lt;a href=&quot;#-set-up-playwright-and-run-tests&quot;&gt;Playwright&lt;/a&gt; to create and run some simple UI tests, and &lt;a href=&quot;#-summary&quot;&gt;a brief comparison&lt;/a&gt; between the two tools.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Alongside Selenium, Cypress and Playwright are currently amongst the most widely used test automation tools. There is a lot of discussion about the pros and cons of each tool, which is the most suitable for a given project etc. but you may want to try these tools out for yourself, this post will help you to get up and running, and run some basic UI tests.&lt;/p&gt;

&lt;p&gt;To evaluate these tools myself, I set up &lt;a href=&quot;https://github.com/dp2020-dev/blazemeter-ecommerce-automated-tests&quot;&gt;a Git repo&lt;/a&gt; to do some basic UI automation, one using Cypress the other Playwright to compare them side by side (I will add Selenium Webdriver soon). If you can set up these tools locally, you will be able to follow and implement the simple test plan outlined below, or alternatively clone the material in the repo itself and run it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ⓘ For reference, I installed both tools on a Mac, and the system under test/code used was JavaScript. However, the instructions I link to cover Windows/Linux and other code bases.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;test-plan&quot;&gt;Test Plan&lt;/h3&gt;

&lt;p&gt;To compare these test tools, I used the &lt;a href=&quot;https://testiotech.com/2024/01/26/5W-Framework/&quot;&gt;5W&lt;/a&gt; approach in ChatGPT to come up with this outline of a test scope:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Page Loads: Ensure that specified page load correctly.&lt;/li&gt;
&lt;li&gt;Navigation: Verify the navigation within the web shop.&lt;/li&gt;
&lt;li&gt;Registered User Login: Test the login process for registered users.&lt;/li&gt;
&lt;li&gt;Add to Basket and Checkout: Check the functionality of adding items to the basket and completing the checkout process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The system under test used here (&lt;a href=&quot;https://www.demoblaze.com&quot;&gt;https://www.demoblaze.com&lt;/a&gt;) has proven to be well suited for e-commerce UI testing, but you of course may have a preferred alternative (generally we’ll be covering standard e-commerce transactions).&lt;/p&gt;

&lt;h3 id=&quot;setting-up-cypress-and-run-tests&quot;&gt;Setting up Cypress and run tests&lt;/h3&gt;

&lt;p&gt;The documentation on installing Cypress itself is pretty user friendly, so rather than repeat material this section will highlight some of the key areas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.cypress.io/guides/getting-started/installing-cypress#System-requirements&quot;&gt;https://docs.cypress.io/guides/getting-started/installing-cypress#System-requirements&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ⓘ If you see a &lt;b&gt; ‘Cypress Configuration Error’&lt;/b&gt; when running ‘npx cypress open’ , ensure you are running cypress from the right folder level, it needs to be in a folder above the cypress.config.js level to avoid any config errors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Provided the installation has been successful, my preferred approach is to open a command line/terminal in the project folder, and run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;npx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cypress&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This should open up the Cypress Launchpad, and for this post we’ll be concentrating on E2E testing (to cover an e-commerce system).&lt;/p&gt;

&lt;p&gt;Once cypress is up and running in the browser, my approach was to follow the Getting Started page to set up the first ‘E2E’ test, and build on that to start covering the project plan:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.cypress.io/guides/end-to-end-testing/writing-your-first-end-to-end-test&quot;&gt;https://docs.cypress.io/guides/end-to-end-testing/writing-your-first-end-to-end-test&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;setting-the-baseurl&quot;&gt;Setting the baseURL&lt;/h4&gt;

&lt;p&gt;For UI tests it’s very useful to not have to explicitly use the url of the system under test (e.g. www.demoblaze.com). We can define the baseUrl in the cypress.config.js in project root. Cypress calls this base url when ‘/’ is used in an E2E test, e.g.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// uses the baseUrl (i.e. www.demoblaze.com in our example) in the cypress.config to open the url.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;fixtures&quot;&gt;Fixtures&lt;/h4&gt;

&lt;p&gt;A lot of the UI tests in this plan use the same user details info for each test, and rather than repeat those strings in each test, we can define a fixture file to store all our log in data, and reuse it in each test.&lt;/p&gt;

&lt;h5 id=&quot;example&quot;&gt;Example:&lt;/h5&gt;

&lt;p&gt;In the fixtures file, the userDetails class contains user log in details:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;welcomeText&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Welcome test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Sid Spendalot&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;UK&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Testville&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;creditCard&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;554433221&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;April&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2023&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This class is used in E2E tests, e.g. in E2EloginPurchases test file, we get the fixture file:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2febfb086c687c0939edf2f1551e847b.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;..and from that line on we can use the details from the fixture file in the test (i.e. the E2E test class is getting the userDetails.password &amp;amp; userDetails.username are those defined in the fixture file):&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/dc6175465df73d5c706268bf8add1429.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;In addition to Cypress documentation, this blog proved useful in understand more about Cypress Fixtures:
[https://testersdock.com/cypress-fixtures/](https://testersdock.com/cypress-fixtures]&lt;/p&gt;

&lt;h4 id=&quot;time-travel&quot;&gt;Time Travel&lt;/h4&gt;

&lt;p&gt;The time travel feature is effectively a record of the changing state of the system under test, which has proven to be invaluable in understanding how the website behaves in response to our test inputs and for debugging.&lt;/p&gt;

&lt;p&gt;Lets demonstrate this by looking at an E2E test that uses our baseUrl set in config, and some of our imported fixture data.&lt;/p&gt;

&lt;h5 id=&quot;example-1&quot;&gt;Example&lt;/h5&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/dp2020-dev/blazemeter-ecommerce-automated-tests/blob/main/cypress/e2e/E2EloginPurchases.cy.js&quot;&gt;E2EloginPurchases&lt;/a&gt; E2E test verifies the log in process works with a valid username/password, and checks a successful log in message appears on screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1_test_passes.png&quot; alt=&quot;Passing E2E run in Cypress browser view&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the spec window of Cypress browser we can see our test code has used our configured baseURL and knows ‘/’ should be ‘www.demoblaze.com’, and uses the imported config to pass in userName &amp;amp; userPassword.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2_travel_back.png&quot; alt=&quot;Passing E2E run in Cypress browser view&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the successful run, we can see the test step to verify a message appears on screen ‘Welcome &lt;user name=&quot;&quot;&gt;&apos; (&apos;Welcome test&apos; in this case):&lt;/user&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/3_loggedIn.png&quot; alt=&quot;Passing E2E run in Cypress browser view&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The advantage of time travel is that it makes it really convenient and efficient to check the variables we’re passing in, and how the system behaves. If we have a failing test, we can efficiently debug by ‘travelling’ to the steps in question. In the example below, the test step expects a different user name to what’s being passed on screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/4_failed_test.png&quot; alt=&quot;Passing E2E run in Cypress browser view&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The failed step is identified and we can have a closer look at exactly what was happening at that point on the system under test.&lt;/p&gt;

&lt;h3 id=&quot;cypress---summary&quot;&gt;Cypress - Summary&lt;/h3&gt;

&lt;p&gt;In summary, the Cypress documentation allows us to get up and running pretty quickly, and the example given of setting up the first test allows us to build up the test plan. In the post we had a quick look at setting a base url and test config, and I personally I was impressed with the [time travel feature]- {#cypress_page_locator}some of the page elements on the system under test were difficult to identify in javascript, the time travel showed the exact stage and screen where the issues were, which was invaluable when it came to debugging.&lt;/p&gt;

&lt;h2 id=&quot;set-up-playwright-and-run-tests&quot;&gt;Set up Playwright and run tests&lt;/h2&gt;

&lt;p&gt;&lt;i&gt; This is a rough guide to get up and running (follow the links for more detailed instruction) and we’ll use the same test plan as mentioned in &lt;a href=&quot;#test-plan&quot;&gt;Test Plan.&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;To install and configure Playwright, I used the following guide which got me up &amp;amp; running:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://techcommunity.microsoft.com/t5/azure-architecture-blog/automating-end-to-end-testing-with-playwright-and-azure/ba-p/3883704&quot;&gt;Automating End-to-End testing with Playwright and Azure Pipelines&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I recommend setting up the folder structure using Visual Studio Code (see step 2 of the linked guide.) You’ll also need an NPM package installed as mentioned in the guide, this should be installed in step 6 by running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;playwright&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;latest&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;ⓘ during installation step 6 ‘Execute Playwright Test Script’ would not work for me, my solution was to change directory (in command line/terminal) to my playwright project folder, then run: &lt;b&gt;npm init playwright@latest&lt;/b&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;run-tests-directly-in-visual-studio-code&quot;&gt;Run tests directly in Visual Studio Code&lt;/h4&gt;

&lt;p&gt;To run directly in VSC, you need to install playwright extension, as per:
&lt;a href=&quot;https://playwright.dev/docs/getting-started-vscode#installation&quot;&gt;https://playwright.dev/docs/getting-started-vscode#installation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once installed you should see a green run icon in the test spec window:
&lt;img src=&quot;/images/VSC_pw_run_icon.png&quot; alt=&quot;VSC run icon&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-tests&quot;&gt;Create tests&lt;/h3&gt;

&lt;p&gt;The initial set up of Playwright helpfully includes a file called &lt;a href=&quot;https://github.com/dp2020-dev/blazemeter-ecommerce-automated-tests/blob/main/playwright/tests/demo.spec.ts&quot;&gt;tests/example.spec.ts&lt;/a&gt;, this gives us a solid example to explain how the tool works, and I used this to build up the test scope.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@playwright/test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;has title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://playwright.dev/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Expect a title &quot;to contain&quot; a substring.
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toHaveTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Playwright/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;get started link&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://playwright.dev/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Click the get started link.
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getByRole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Get started&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Expects page to have a heading with the name of Installation.
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getByRole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;heading&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Installation&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toBeVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To run tests, use the following command in either VSC or the command line/terminal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;npx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;playwright&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;playwright-codegen&quot;&gt;Playwright codegen&lt;/h3&gt;

&lt;p&gt;Playwright has an impressive feature to record script automatically called Codegen. In theory it can record the whole log in, add item to basket etc. steps for us, but I found it more useful to find those page elements which were &lt;a href=&quot;cypress_page_locator&quot;&gt;awkward to find and use in Cypress.&lt;/a&gt;
For example, if we run the following command, the specified website and Playwright inspector will load up.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;npx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;playwright&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codegen&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browserstack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can undertake our actions on the website, e.g. lets click log in, and input a user name and password. As you can see in the clip below, the user actions in the browser is tracked in the Playwright Inspector, so we can see the locators, tags and roles etc.&lt;/p&gt;

&lt;iframe width=&quot;427&quot; height=&quot;240&quot; src=&quot;/images/PW_Codegen.mp4&quot; title=&quot;Codegen with browser and inspector windows&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;In my experience, it didn’t quite capture the whole test code I needed, but it definitely saved time in getting the right elements.&lt;/p&gt;

&lt;p&gt;Browerstack has a useful summary here: &lt;a href=&quot;https://www.browserstack.com/guide/playwright-debugging#:~:text=Playwright%20is%20an%20open%2Dsource,the%20headful%20mode%20for%20tests&quot;&gt;www.browserstack.com/guide/playwright-debugging/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;authenticated-log-in-state&quot;&gt;Authenticated log in state&lt;/h3&gt;

&lt;p&gt;Rather than have to repeat the log in steps explicitly for each test that requires a logged in user (e.g. adding items to cart and checking out), its possible to save the ‘logged in state’ to a setting in the &lt;a href=&quot;https://github.com/dp2020-dev/blazemeter-ecommerce-automated-tests/blob/main/playwright/playwright/.auth/user.json&quot;&gt;.config.ts file&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;storageState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;playwright/.auth/user.json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This object points at &lt;a href=&quot;https://github.com/dp2020-dev/blazemeter-ecommerce-automated-tests/blob/main/playwright/tests/auth.setup.ts&quot;&gt;auth.setup&lt;/a&gt; (which is in the testDir location specified in the config). This file is effectively the successful log in test, and writes its logged in state back to the user.json file configured in playwright.config:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;storageState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authFile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, by importing the Test class, the logged in state is used, i.e. each test which imports this class is in a logged state as a begin action.&lt;/p&gt;

&lt;p&gt;If you want to see this applied, see the &lt;a href=&quot;https://github.com/dp2020-dev/blazemeter-ecommerce-automated-tests/blob/main/playwright/tests/auth.setup.ts&quot;&gt;auth.setup&lt;/a&gt; file in playwright/tests, and the &lt;a href=&quot;https://github.com/dp2020-dev/blazemeter-ecommerce-automated-tests/blob/main/playwright/playwright/.auth/user.json&quot;&gt;user.json&lt;/a&gt; in playwright/playwright/.auth, or checkout this helpful write up: &lt;a href=&quot;https://www.cuketest.com/playwright/docs/auth/&quot;&gt;https://www.cuketest.com/playwright/docs/auth/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;traceviewer&quot;&gt;Traceviewer&lt;/h3&gt;

&lt;p&gt;Traceviewer allows us to review a record of completed tests, similar in a way to Cypress Time travel (which we looked at previously), it reports the test result and allows us to check the outcome of each test step. The benefits here are for reporting itself, and when necessary for debugging, we can review a failed test and see exactly where/why it failed the given test step.&lt;/p&gt;

&lt;p&gt;To enable traceviewer, we need the following value in the &lt;a href=&quot;https://github.com/dp2020-dev/blazemeter-ecommerce-automated-tests/blob/main/playwright/playwright.config.ts&quot;&gt;config&lt;/a&gt; file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Collect&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retrying&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;failed&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;See&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//playwright.dev/docs/trace-viewer _/
&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;on-first-retry&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Lets demonstrate how to use traceviewer by change one of our passing tests so it fails. In &lt;a href=&quot;https://github.com/dp2020-dev/blazemeter-ecommerce-automated-tests/blob/main/playwright/tests/login.spec.ts&quot;&gt;login.steps&lt;/a&gt; , the log in message when logging in is &lt;b&gt;‘Welcome test’&lt;/b&gt; (test being the username), so lets change the expected value in the test to &lt;b&gt;‘Welcome visitor’&lt;/b&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Log in tests&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Successful log&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loginPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loginPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;initializeLocators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loginPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loginFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getByRole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Welcome visitor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toBeVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To run traceviewer, go to the command line/terminal and input:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;npx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;playwright&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This runs traceviewer for the specified test.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Traceviewer1.png&quot; alt=&quot;Traceviewer running&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Traceviewer saves the test run in a zip file, you can also view it in the browser, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Serving&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTML&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;report&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//localhost:57023. Press Ctrl+C to quit.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/images/Traceviewer2.png&quot; alt=&quot;Traceviewer test steps and traces&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The test report shows us the failing test, and clicking trace allows us to see screenshots of each test step. We can see that the message on screen is ‘Welcome test’ not ‘Welcome visitor’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Traceviewer3.png&quot; alt=&quot;Traceviewer screenshots of failed test step&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a really good explanation and summary of Traceviewer, from the official Playwright channel:&lt;/p&gt;

&lt;iframe width=&quot;427&quot; height=&quot;240&quot; src=&quot;https://www.youtube.com/embed/lfxjs--9ZQs&quot; title=&quot;Viewing Playwright traces&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;summary---playwright&quot;&gt;Summary - Playwright&lt;/h2&gt;

&lt;p&gt;I found Playwright relatively straightforward to get up and running quickly, and am impressed by the utility and intuitiveness of codegen and traceviewer. We used a simple example &lt;a href=&quot;#-traceviewer&quot;&gt;above&lt;/a&gt; for traceviewer but it definitely enables quick and effective reporting and debugging, and the codegen tool did help in finding the more awkward page elements which took more time in Cypress.&lt;/p&gt;

&lt;h1 id=&quot;cypress-versus-playwright-and-selenium&quot;&gt;Cypress versus Playwright (and Selenium)&lt;/h1&gt;

&lt;p&gt;&lt;i&gt; This is a summary of what we’ve seen in this exercise, and compares to a tool I am more familiar with, Selenium.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Both Cypress and Playwright are marketed as more ‘modern’ to use than the older Selenium, and this exercise has demonstrated to me that both Cypress &amp;amp; Playwright are more ‘lightweight’ to install, intuitive to use and quicker to get up and running and getting good UI test coverage efficiently. &lt;a href=&quot;https://docs.cypress.io/guides/overview/why-cypress#Our-mission&quot;&gt;Cypress documentation&lt;/a&gt; states it should ideally be used when building a web application, and I can see how its user friendliness would enable devs/testers to efficiently undertake good test driven design.&lt;/p&gt;

&lt;p&gt;The debugging and selection tools mentioned in this exercise were a big help, and well designed in my opinion. The impressive built in reporting tool (Traceviewer) in Playwright is something Selenium lacks (at least without a plug in).&lt;/p&gt;

&lt;p&gt;However, there are some points to consider when we compare to what is still the mostly widely used alternative, Selenium. Both Cypress and Playwright can be described as ‘opinionated’ i.e. they are designed in a specific way to work efficiently but therefore have constraints on how they are used. For example, both tools have implicit waits (i.e. a test step waits for an element to load). This is at first a glance an advantage, it allows the page to load and the test to proceed. However, it may mask a performance issue, perhaps the delay in loading is not acceptable for the users. Selenium does not have this implicit wait, you can add one to a test but its not the default.&lt;/p&gt;

&lt;p&gt;While the ease of use can appear to be an advantage, perhaps Selenium’s flexibility in being able to integrate other third party tools and plug ins means it remains more adaptable, and can be used in a broader range of projects.&lt;/p&gt;

&lt;p&gt;Given the age of Selenium, which has been around substantially longer than the other tools, it has a wealth of support and knowledge available online, the others are building that legacy too but you will generally find someone has had the same issue you have in Selenium!&lt;/p&gt;

&lt;p&gt;To wrap up, I would recommend anyone weighing up the pros and cons of Cypress versus Playwright (and of course Selenium) to try out the tools as demonstrated in this blog. I found it invaluable to see for myself how Cypress and Playwright really do offer something different, and perhaps more ‘modern’, but its interesting to note I use Selenium on my day to day work.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ⓘIn future I will add a 3rd project to my github repo to cover off the &lt;a href=&quot;#test-plan&quot;&gt;test plan&lt;/a&gt; for Selenium webdriver.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 

</feed>
